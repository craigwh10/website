{"ast":null,"code":"var _jsxFileName = \"/Users/craigwhite/Desktop/Typescript/Website/components/ProjectGenerator/ProjectGenerator.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport useGitProjects from \"../../container/gitprojects/useGitProjects\";\n\nconst ProjectGenerator = props => {\n  const [gitRepos, isLoading] = useGitProjects();\n\n  if (isLoading) {\n    __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 5\n      }\n    }, \"Loading\");\n  } else {\n    __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 5\n      }\n    }, gitRepos.map(item => {\n      __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 9\n        }\n      }, \"hi\");\n    }));\n  }\n\n  return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 10\n    }\n  }, \"Hi\");\n};\n\nexport default ProjectGenerator;","map":{"version":3,"sources":["/Users/craigwhite/Desktop/Typescript/Website/components/ProjectGenerator/ProjectGenerator.tsx"],"names":["React","useGitProjects","ProjectGenerator","props","gitRepos","isLoading","map","item"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,4CAA3B;;AAEA,MAAMC,gBAA2B,GAAIC,KAAD,IAAW;AAC7C,QAAM,CAACC,QAAD,EAAWC,SAAX,IAAwBJ,cAAc,EAA5C;;AAEA,MAAII,SAAJ,EAAe;AACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAFD,MAEO;AACL,UAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,QAAQ,CAACE,GAAT,CAAcC,IAAD,IAAU;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,KAFA,CADH;AAKD;;AACD,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAbD;;AAeA,eAAeL,gBAAf","sourcesContent":["import React from \"react\";\nimport useGitProjects from \"../../container/gitprojects/useGitProjects\";\n\nconst ProjectGenerator: React.SFC = (props) => {\n  const [gitRepos, isLoading] = useGitProjects();\n\n  if (isLoading) {\n    <p>Loading</p>;\n  } else {\n    <React.Fragment>\n      {gitRepos.map((item) => {\n        <p>hi</p>;\n      })}\n    </React.Fragment>;\n  }\n  return <p>Hi</p>;\n};\n\nexport default ProjectGenerator;\n"]},"metadata":{},"sourceType":"module"}
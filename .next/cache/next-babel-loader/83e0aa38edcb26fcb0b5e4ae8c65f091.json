{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport axios from \"axios\"; // type AxiosResponse = object[] | null;\n\nconst useGitProjects = () => {\n  const {\n    0: gitRepos,\n    1: setGitRepos\n  } = useState(null);\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(Boolean);\n  useEffect(() => {\n    const fetchGit = async () => {\n      return await axios(\"https://api.github.com/users/craigwh10/repos\");\n    };\n\n    let result = fetchGit();\n    console.log(result);\n\n    if (result) {\n      setGitRepos(result);\n      setLoading(false);\n    }\n  }, []);\n  return [gitRepos, isLoading];\n};\n\nexport default useGitProjects;","map":{"version":3,"sources":["/Users/craigwhite/Desktop/Typescript/Website/container/gitprojects/useGitProjects.ts"],"names":["useEffect","useState","axios","useGitProjects","gitRepos","setGitRepos","isLoading","setLoading","Boolean","fetchGit","result","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BJ,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM;AAAA,OAACK,SAAD;AAAA,OAAYC;AAAZ,MAA0BN,QAAQ,CAACO,OAAD,CAAxC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,QAAQ,GAAG,YAAY;AAC3B,aAAO,MAAMP,KAAK,CAAC,8CAAD,CAAlB;AACD,KAFD;;AAGA,QAAIQ,MAAM,GAAGD,QAAQ,EAArB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,QAAIA,MAAJ,EAAY;AACVL,MAAAA,WAAW,CAACK,MAAD,CAAX;AACAH,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAO,CAACH,QAAD,EAAWE,SAAX,CAAP;AACD,CAjBD;;AAmBA,eAAeH,cAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\n// type AxiosResponse = object[] | null;\n\nconst useGitProjects = () => {\n  const [gitRepos, setGitRepos] = useState(null);\n  const [isLoading, setLoading] = useState(Boolean);\n\n  useEffect(() => {\n    const fetchGit = async () => {\n      return await axios(\"https://api.github.com/users/craigwh10/repos\");\n    };\n    let result = fetchGit();\n    console.log(result);\n    if (result) {\n      setGitRepos(result);\n      setLoading(false);\n    }\n  }, []);\n\n  return [gitRepos, isLoading];\n};\n\nexport default useGitProjects;\n"]},"metadata":{},"sourceType":"module"}
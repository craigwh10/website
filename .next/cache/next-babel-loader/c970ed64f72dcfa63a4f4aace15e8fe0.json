{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/craigwhite/Desktop/Typescript/Website/components/ProjectCalculator/LangGenerator.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport useGitProjectCalculator from \"../../container/gitprojects/gitProjectCalculator\"; //\n\nimport GitLang from \"./GitLang\";\n\nvar LangGenerator = function LangGenerator() {\n  var _useGitProjectCalcula = useGitProjectCalculator(),\n      gitLangFreq = _useGitProjectCalcula.gitLangFreq,\n      isLoading = _useGitProjectCalcula.isLoading;\n\n  if (isLoading) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 12\n      }\n    }, \"Loading\");\n  }\n\n  var gitLangs = gitLangFreq && Object.keys(gitLangFreq);\n  var Printed = [];\n\n  if (gitLangs) {\n    for (var i = 0; i < gitLangs.length; i++) {\n      Printed.push(__jsx(GitLang, {\n        key: i,\n        language: gitLangs[i],\n        ammount: gitLangFreq[gitLangs[i]],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }, gitLangs && Printed);\n};\n\nexport default LangGenerator; // Just need to decypher types","map":{"version":3,"sources":["/Users/craigwhite/Desktop/Typescript/Website/components/ProjectCalculator/LangGenerator.tsx"],"names":["React","useGitProjectCalculator","GitLang","LangGenerator","gitLangFreq","isLoading","gitLangs","Object","keys","Printed","i","length","push"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,uBAAP,MAAoC,kDAApC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;;AACA,IAAMC,aAAwB,GAAG,SAA3BA,aAA2B,GAAM;AAAA,8BACFF,uBAAuB,EADrB;AAAA,MAC7BG,WAD6B,yBAC7BA,WAD6B;AAAA,MAChBC,SADgB,yBAChBA,SADgB;;AAGrC,MAAIA,SAAJ,EAAe;AACb,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACD;;AAED,MAAIC,QAAuB,GAAGF,WAAW,IAAIG,MAAM,CAACC,IAAP,CAAYJ,WAAZ,CAA7C;AAEA,MAAMK,OAA2B,GAAG,EAApC;;AACA,MAAIH,QAAJ,EAAc;AACZ,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCD,MAAAA,OAAO,CAACG,IAAR,CACE,MAAC,OAAD;AACE,QAAA,GAAG,EAAEF,CADP;AAEE,QAAA,QAAQ,EAAEJ,QAAQ,CAACI,CAAD,CAFpB;AAGE,QAAA,OAAO,EAAEN,WAAW,CAACE,QAAQ,CAACI,CAAD,CAAT,CAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;AACF;;AAED,SAAO,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBJ,QAAQ,IAAIG,OAA7B,CAAP;AACD,CAvBD;;AAyBA,eAAeN,aAAf,C,CAEA","sourcesContent":["import React from \"react\";\nimport useGitProjectCalculator from \"../../container/gitprojects/gitProjectCalculator\";\n//\nimport GitLang from \"./GitLang\";\nconst LangGenerator: React.SFC = () => {\n  const { gitLangFreq, isLoading } = useGitProjectCalculator();\n\n  if (isLoading) {\n    return <p>Loading</p>;\n  }\n\n  let gitLangs: Array<string> = gitLangFreq && Object.keys(gitLangFreq);\n\n  const Printed: Array<JSX.Element> = [];\n  if (gitLangs) {\n    for (var i = 0; i < gitLangs.length; i++) {\n      Printed.push(\n        <GitLang\n          key={i}\n          language={gitLangs[i]}\n          ammount={gitLangFreq[gitLangs[i]]}\n        />\n      );\n    }\n  }\n\n  return <React.Fragment>{gitLangs && Printed}</React.Fragment>;\n};\n\nexport default LangGenerator;\n\n// Just need to decypher types\n"]},"metadata":{},"sourceType":"module"}